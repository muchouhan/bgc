mkdir bgc-app
cd bgc-app
truffle unbox pet-shop
truffle develop
>compile
>migrate
>npm run dev


truffle migrate --compile-all --reset --network development
truffle console --network development

test

BGC.deployed().then(function(instance){app= instance;})
app.getGreetings()
app.setGreetings("Hello Mukund",{from:web3.eth.accounts[0]})



app.addOrg("LTI","123456","Password",{from:web3.eth.accounts[1]})
app.addOrg("CG","3333456","Password",{from:web3.eth.accounts[2]})
app.getOrgSize()
app.getOrg(web3.eth.accounts[1])
app.authenticateOrg(web3.eth.accounts[1],"Password")
app.authenticateOrg(web3.eth.accounts[2],"Password1")
app.isOrgExist("LTI","123456")
app.isOrgExist("TCS","2223456")

app.addEmployee("Password","Mukund","Chouhan","103 Jay Shiv darshan",8839202104,web3.eth.accounts[1],9,{from:web3.eth.accounts[3]})
app.addEmployee("Password","Sarthak","Chouhan","103 Jay Shiv darshan",8839202104,web3.eth.accounts[2],1,{from:web3.eth.accounts[4]})

app.getEmployeeSize()
app.getEmployee(web3.eth.accounts[3])
app.authenticateEmployee(web3.eth.accounts[3],"Password")




Web3 = require('web3')
web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
web3.eth.accounts
code = fs.readFileSync('contracts\\BGC.sol').toString()
solc = require('solc')
compiledCode = solc.compile(code)
abiDefinition = JSON.parse(compiledCode.contracts[':BGC'].interface)
VotingContract = web3.eth.contract(abiDefinition)
byteCode = compiledCode.contracts[':BGC'].bytecode

deployedContract = VotingContract.new(['Rama','Nick','Jose'],{data: byteCode, from: web3.eth.accounts[0], gas: 4700000})
deployedContract.address
contractInstance = VotingContract.at(deployedContract.address)



  function isBGCAllowed(string _uname, address _orgAddress) public view returns(bool) {
       for(uint i = 0; i < bgcRequests.length; ++i) {
           if(StringUtils.equal(bgcRequests[i].uname, _uname)
              && bgcRequests[i].orgAddress == _orgAddress
              && bgcRequests[i].isAllowed) {
               return true;
           }
       }
       return false;
   }

   function addBGCRequest(string _uname, address _orgAddress) public payable {
       for(uint i = 0; i < bgcRequests.length; ++ i) {
           if(StringUtils.equal(bgcRequests[i].uname, _uname) && bgcRequests[i].orgAddress == _orgAddress) {
               return;
           }
       }
       bgcRequests.length ++;
       bgcRequests.push(Request(_uname, _orgAddress, false));
   }


   function getBankRequests(string Uname, uint ind) public payable returns(address) {
       uint j = 0;
       for(uint i=0;i<bgcRequests.length;++i) {
           if(StringUtils.equal(bgcRequests[i].uname, Uname) && j == ind && bgcRequests[i].isAllowed == false) {
               return bgcRequests[i].orgAddress;
           }
           j ++;
       }
       return 0x00;
   }



   function allowBank(string Uname, address _orgAddress, bool ifallowed) public payable {
       for(uint i = 0; i < bgcRequests.length; ++ i) {
           if(StringUtils.equal(bgcRequests[i].uname, Uname) && bgcRequests[i].orgAddress == _orgAddress) {
               if(ifallowed) {
                   bgcRequests[i].isAllowed = true;
               } else {
                   for(uint j=i;j<bgcRequests.length-2; ++j) {
                       bgcRequests[i] = bgcRequests[i+1];
                   }
                   bgcRequests.length --;
               }
               return;
           }
       }
   }

   
   
      function pendingBGCRequests(string uname) public returns(address[])  {
         address[] storage requests;
         for(uint256 i=0;i<bgcRequests.length;++i) {
             if(StringUtils.equal(bgcRequests[i].uname, uname) && bgcRequests[i].isAllowed == false) {
                  requests.push(bgcRequests[i].orgAddress);
             }
         }
        return requests;
     }

	 
	 
	 
	 
	   var user = sessionStorage.employeeName;
      if(user==undefined) return;
      App.contracts.BGC.deployed().then(function(instance) {
       console.log("fetch employee details from network");
       return instance.pendingBGCRequests(user, {
        from: App.account,
        gas: 500000
      });
  }).then(function(fields) {
      console.log("showEmployeeBGCRequest :",fields);
  }).catch(function(err) {
    console.error(err);
  });